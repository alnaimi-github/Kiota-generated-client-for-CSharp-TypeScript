/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createUntypedNodeFromDiscriminatorValue, type AdditionalDataHolder, type DateOnly, type Parsable, type ParseNode, type SerializationWriter, type UntypedNode } from '@microsoft/kiota-abstractions';

export interface AccessTokenDto extends AdditionalDataHolder, Parsable {
    /**
     * The accessToken property
     */
    accessToken?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AccessTokenDto}
 */
// @ts-ignore
export function createAccessTokenDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccessTokenDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateEntryBatchDto}
 */
// @ts-ignore
export function createCreateEntryBatchDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateEntryBatchDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateEntryDto}
 */
// @ts-ignore
export function createCreateEntryDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateEntryDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateHabitDto}
 */
// @ts-ignore
export function createCreateHabitDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateHabitDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateTagDto}
 */
// @ts-ignore
export function createCreateTagDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateTagDto;
}
export interface CreateEntryBatchDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The entries property
     */
    entries?: CreateEntryDto[] | null;
}
export interface CreateEntryDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date property
     */
    date?: DateOnly | null;
    /**
     * The habitId property
     */
    habitId?: string | null;
    /**
     * The note property
     */
    note?: string | null;
    /**
     * The value property
     */
    value?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EntryDto}
 */
// @ts-ignore
export function createEntryDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEntryDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EntryHabitDto}
 */
// @ts-ignore
export function createEntryHabitDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEntryHabitDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FrequencyDto}
 */
// @ts-ignore
export function createFrequencyDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFrequencyDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GitHubUserProfileDto}
 */
// @ts-ignore
export function createGitHubUserProfileDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGitHubUserProfileDto;
}
export interface CreateHabitDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The endDate property
     */
    endDate?: DateOnly | null;
    /**
     * The frequency property
     */
    frequency?: FrequencyDto | null;
    /**
     * The milestone property
     */
    milestone?: MilestoneDto | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The target property
     */
    target?: TargetDto | null;
    /**
     * The type property
     */
    type?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HabitDto}
 */
// @ts-ignore
export function createHabitDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHabitDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LinkDto}
 */
// @ts-ignore
export function createLinkDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLinkDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginUserDto}
 */
// @ts-ignore
export function createLoginUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginUserDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MilestoneDto}
 */
// @ts-ignore
export function createMilestoneDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMilestoneDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Operation}
 */
// @ts-ignore
export function createOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaginationResultOfExpandoObject_items}
 */
// @ts-ignore
export function createPaginationResultOfExpandoObject_itemsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaginationResultOfExpandoObject_items;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PaginationResultOfExpandoObject}
 */
// @ts-ignore
export function createPaginationResultOfExpandoObjectFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPaginationResultOfExpandoObject;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RefreshTokenDto}
 */
// @ts-ignore
export function createRefreshTokenDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRefreshTokenDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RegisterUserDto}
 */
// @ts-ignore
export function createRegisterUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRegisterUserDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {StoreGithubAccessTokenDto}
 */
// @ts-ignore
export function createStoreGithubAccessTokenDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStoreGithubAccessTokenDto;
}
export interface CreateTagDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagDto}
 */
// @ts-ignore
export function createTagDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTagDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TagsCollectionDto}
 */
// @ts-ignore
export function createTagsCollectionDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTagsCollectionDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TargetDto}
 */
// @ts-ignore
export function createTargetDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTargetDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateEntryDto}
 */
// @ts-ignore
export function createUpdateEntryDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateEntryDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateHabitDto}
 */
// @ts-ignore
export function createUpdateHabitDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateHabitDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateMilestoneDto}
 */
// @ts-ignore
export function createUpdateMilestoneDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateMilestoneDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateTagDto}
 */
// @ts-ignore
export function createUpdateTagDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateTagDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateUserProfileDto}
 */
// @ts-ignore
export function createUpdateUserProfileDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateUserProfileDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpsertHabitTagsDto}
 */
// @ts-ignore
export function createUpsertHabitTagsDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpsertHabitTagsDto;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UserDto}
 */
// @ts-ignore
export function createUserDtoFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUserDto;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAccessTokenDto(accessTokenDto: Partial<AccessTokenDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { accessTokenDto.accessToken = n.getStringValue(); },
        "refreshToken": n => { accessTokenDto.refreshToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateEntryBatchDto(createEntryBatchDto: Partial<CreateEntryBatchDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "entries": n => { createEntryBatchDto.entries = n.getCollectionOfObjectValues<CreateEntryDto>(createCreateEntryDtoFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateEntryDto(createEntryDto: Partial<CreateEntryDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { createEntryDto.date = n.getDateOnlyValue(); },
        "habitId": n => { createEntryDto.habitId = n.getStringValue(); },
        "note": n => { createEntryDto.note = n.getStringValue(); },
        "value": n => { createEntryDto.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateHabitDto(createHabitDto: Partial<CreateHabitDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createHabitDto.description = n.getStringValue(); },
        "endDate": n => { createHabitDto.endDate = n.getDateOnlyValue(); },
        "frequency": n => { createHabitDto.frequency = n.getObjectValue<FrequencyDto>(createFrequencyDtoFromDiscriminatorValue); },
        "milestone": n => { createHabitDto.milestone = n.getObjectValue<MilestoneDto>(createMilestoneDtoFromDiscriminatorValue); },
        "name": n => { createHabitDto.name = n.getStringValue(); },
        "target": n => { createHabitDto.target = n.getObjectValue<TargetDto>(createTargetDtoFromDiscriminatorValue); },
        "type": n => { createHabitDto.type = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateTagDto(createTagDto: Partial<CreateTagDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { createTagDto.description = n.getStringValue(); },
        "name": n => { createTagDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEntryDto(entryDto: Partial<EntryDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAtUtc": n => { entryDto.createdAtUtc = n.getDateValue(); },
        "date": n => { entryDto.date = n.getDateOnlyValue(); },
        "externalId": n => { entryDto.externalId = n.getStringValue(); },
        "habit": n => { entryDto.habit = n.getObjectValue<EntryHabitDto>(createEntryHabitDtoFromDiscriminatorValue); },
        "id": n => { entryDto.id = n.getStringValue(); },
        "isArchived": n => { entryDto.isArchived = n.getBooleanValue(); },
        "links": n => { entryDto.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "notes": n => { entryDto.notes = n.getStringValue(); },
        "source": n => { entryDto.source = n.getNumberValue(); },
        "updatedAtUtc": n => { entryDto.updatedAtUtc = n.getDateValue(); },
        "value": n => { entryDto.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEntryHabitDto(entryHabitDto: Partial<EntryHabitDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { entryHabitDto.id = n.getStringValue(); },
        "name": n => { entryHabitDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFrequencyDto(frequencyDto: Partial<FrequencyDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "timesPerPeriod": n => { frequencyDto.timesPerPeriod = n.getNumberValue(); },
        "type": n => { frequencyDto.type = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGitHubUserProfileDto(gitHubUserProfileDto: Partial<GitHubUserProfileDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatarUrl": n => { gitHubUserProfileDto.avatarUrl = n.getStringValue(); },
        "bio": n => { gitHubUserProfileDto.bio = n.getStringValue(); },
        "email": n => { gitHubUserProfileDto.email = n.getStringValue(); },
        "followers": n => { gitHubUserProfileDto.followers = n.getNumberValue(); },
        "following": n => { gitHubUserProfileDto.following = n.getNumberValue(); },
        "links": n => { gitHubUserProfileDto.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "login": n => { gitHubUserProfileDto.login = n.getStringValue(); },
        "name": n => { gitHubUserProfileDto.name = n.getStringValue(); },
        "publicRepos": n => { gitHubUserProfileDto.publicRepos = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHabitDto(habitDto: Partial<HabitDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAtUtc": n => { habitDto.createdAtUtc = n.getDateValue(); },
        "description": n => { habitDto.description = n.getStringValue(); },
        "endDate": n => { habitDto.endDate = n.getDateOnlyValue(); },
        "frequency": n => { habitDto.frequency = n.getObjectValue<FrequencyDto>(createFrequencyDtoFromDiscriminatorValue); },
        "id": n => { habitDto.id = n.getStringValue(); },
        "isArchived": n => { habitDto.isArchived = n.getBooleanValue(); },
        "lastCompletedAtUtc": n => { habitDto.lastCompletedAtUtc = n.getDateValue(); },
        "links": n => { habitDto.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "milestone": n => { habitDto.milestone = n.getObjectValue<MilestoneDto>(createMilestoneDtoFromDiscriminatorValue); },
        "name": n => { habitDto.name = n.getStringValue(); },
        "status": n => { habitDto.status = n.getNumberValue(); },
        "target": n => { habitDto.target = n.getObjectValue<TargetDto>(createTargetDtoFromDiscriminatorValue); },
        "type": n => { habitDto.type = n.getNumberValue(); },
        "updatedAtUtc": n => { habitDto.updatedAtUtc = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLinkDto(linkDto: Partial<LinkDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "href": n => { linkDto.href = n.getStringValue(); },
        "method": n => { linkDto.method = n.getStringValue(); },
        "rel": n => { linkDto.rel = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginUserDto(loginUserDto: Partial<LoginUserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { loginUserDto.email = n.getStringValue(); },
        "password": n => { loginUserDto.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMilestoneDto(milestoneDto: Partial<MilestoneDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "current": n => { milestoneDto.current = n.getNumberValue(); },
        "target": n => { milestoneDto.target = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOperation(operation: Partial<Operation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "from": n => { operation.from = n.getStringValue(); },
        "op": n => { operation.op = n.getStringValue(); },
        "operationType": n => { operation.operationType = n.getNumberValue(); },
        "path": n => { operation.path = n.getStringValue(); },
        "value": n => { operation.value = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaginationResultOfExpandoObject(paginationResultOfExpandoObject: Partial<PaginationResultOfExpandoObject> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "hasNextPage": n => { paginationResultOfExpandoObject.hasNextPage = n.getBooleanValue(); },
        "hasPreviousPage": n => { paginationResultOfExpandoObject.hasPreviousPage = n.getBooleanValue(); },
        "items": n => { paginationResultOfExpandoObject.items = n.getCollectionOfObjectValues<PaginationResultOfExpandoObject_items>(createPaginationResultOfExpandoObject_itemsFromDiscriminatorValue); },
        "links": n => { paginationResultOfExpandoObject.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "page": n => { paginationResultOfExpandoObject.page = n.getNumberValue(); },
        "pageSize": n => { paginationResultOfExpandoObject.pageSize = n.getNumberValue(); },
        "totalCount": n => { paginationResultOfExpandoObject.totalCount = n.getNumberValue(); },
        "totalPages": n => { paginationResultOfExpandoObject.totalPages = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPaginationResultOfExpandoObject_items(paginationResultOfExpandoObject_items: Partial<PaginationResultOfExpandoObject_items> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRefreshTokenDto(refreshTokenDto: Partial<RefreshTokenDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "refreshToken": n => { refreshTokenDto.refreshToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRegisterUserDto(registerUserDto: Partial<RegisterUserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "confirmPassword": n => { registerUserDto.confirmPassword = n.getStringValue(); },
        "email": n => { registerUserDto.email = n.getStringValue(); },
        "name": n => { registerUserDto.name = n.getStringValue(); },
        "password": n => { registerUserDto.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStoreGithubAccessTokenDto(storeGithubAccessTokenDto: Partial<StoreGithubAccessTokenDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { storeGithubAccessTokenDto.accessToken = n.getStringValue(); },
        "expiresInDays": n => { storeGithubAccessTokenDto.expiresInDays = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagDto(tagDto: Partial<TagDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAtUtc": n => { tagDto.createdAtUtc = n.getDateValue(); },
        "description": n => { tagDto.description = n.getStringValue(); },
        "id": n => { tagDto.id = n.getStringValue(); },
        "links": n => { tagDto.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "name": n => { tagDto.name = n.getStringValue(); },
        "updatedAtUtc": n => { tagDto.updatedAtUtc = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTagsCollectionDto(tagsCollectionDto: Partial<TagsCollectionDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { tagsCollectionDto.items = n.getCollectionOfObjectValues<TagDto>(createTagDtoFromDiscriminatorValue); },
        "links": n => { tagsCollectionDto.links = n.getCollectionOfPrimitiveValues<UntypedNode>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTargetDto(targetDto: Partial<TargetDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "unit": n => { targetDto.unit = n.getStringValue(); },
        "value": n => { targetDto.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateEntryDto(updateEntryDto: Partial<UpdateEntryDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "date": n => { updateEntryDto.date = n.getDateOnlyValue(); },
        "notes": n => { updateEntryDto.notes = n.getStringValue(); },
        "value": n => { updateEntryDto.value = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateHabitDto(updateHabitDto: Partial<UpdateHabitDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateHabitDto.description = n.getStringValue(); },
        "endDate": n => { updateHabitDto.endDate = n.getDateOnlyValue(); },
        "frequency": n => { updateHabitDto.frequency = n.getObjectValue<FrequencyDto>(createFrequencyDtoFromDiscriminatorValue); },
        "milestone": n => { updateHabitDto.milestone = n.getObjectValue<UpdateMilestoneDto>(createUpdateMilestoneDtoFromDiscriminatorValue); },
        "name": n => { updateHabitDto.name = n.getStringValue(); },
        "target": n => { updateHabitDto.target = n.getObjectValue<TargetDto>(createTargetDtoFromDiscriminatorValue); },
        "type": n => { updateHabitDto.type = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateMilestoneDto(updateMilestoneDto: Partial<UpdateMilestoneDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "target": n => { updateMilestoneDto.target = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateTagDto(updateTagDto: Partial<UpdateTagDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { updateTagDto.description = n.getStringValue(); },
        "name": n => { updateTagDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateUserProfileDto(updateUserProfileDto: Partial<UpdateUserProfileDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { updateUserProfileDto.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpsertHabitTagsDto(upsertHabitTagsDto: Partial<UpsertHabitTagsDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "tagIds": n => { upsertHabitTagsDto.tagIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUserDto(userDto: Partial<UserDto> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "createdAtUtc": n => { userDto.createdAtUtc = n.getDateValue(); },
        "email": n => { userDto.email = n.getStringValue(); },
        "id": n => { userDto.id = n.getStringValue(); },
        "links": n => { userDto.links = n.getCollectionOfObjectValues<LinkDto>(createLinkDtoFromDiscriminatorValue); },
        "name": n => { userDto.name = n.getStringValue(); },
        "updatedAtUtc": n => { userDto.updatedAtUtc = n.getDateValue(); },
    }
}
export interface EntryDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAtUtc property
     */
    createdAtUtc?: Date | null;
    /**
     * The date property
     */
    date?: DateOnly | null;
    /**
     * The externalId property
     */
    externalId?: string | null;
    /**
     * The habit property
     */
    habit?: EntryHabitDto | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The isArchived property
     */
    isArchived?: boolean | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The source property
     */
    source?: number | null;
    /**
     * The updatedAtUtc property
     */
    updatedAtUtc?: Date | null;
    /**
     * The value property
     */
    value?: number | null;
}
export interface EntryHabitDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface FrequencyDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The timesPerPeriod property
     */
    timesPerPeriod?: number | null;
    /**
     * The type property
     */
    type?: number | null;
}
export interface GitHubUserProfileDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The avatarUrl property
     */
    avatarUrl?: string | null;
    /**
     * The bio property
     */
    bio?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The followers property
     */
    followers?: number | null;
    /**
     * The following property
     */
    following?: number | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The login property
     */
    login?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The publicRepos property
     */
    publicRepos?: number | null;
}
export interface HabitDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAtUtc property
     */
    createdAtUtc?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The endDate property
     */
    endDate?: DateOnly | null;
    /**
     * The frequency property
     */
    frequency?: FrequencyDto | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The isArchived property
     */
    isArchived?: boolean | null;
    /**
     * The lastCompletedAtUtc property
     */
    lastCompletedAtUtc?: Date | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The milestone property
     */
    milestone?: MilestoneDto | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The target property
     */
    target?: TargetDto | null;
    /**
     * The type property
     */
    type?: number | null;
    /**
     * The updatedAtUtc property
     */
    updatedAtUtc?: Date | null;
}
export interface LinkDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The href property
     */
    href?: string | null;
    /**
     * The method property
     */
    method?: string | null;
    /**
     * The rel property
     */
    rel?: string | null;
}
export interface LoginUserDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface MilestoneDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The current property
     */
    current?: number | null;
    /**
     * The target property
     */
    target?: number | null;
}
export interface Operation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The from property
     */
    from?: string | null;
    /**
     * The op property
     */
    op?: string | null;
    /**
     * The operationType property
     */
    operationType?: number | null;
    /**
     * The path property
     */
    path?: string | null;
    /**
     * The value property
     */
    value?: UntypedNode | null;
}
export interface PaginationResultOfExpandoObject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The hasNextPage property
     */
    hasNextPage?: boolean | null;
    /**
     * The hasPreviousPage property
     */
    hasPreviousPage?: boolean | null;
    /**
     * The items property
     */
    items?: PaginationResultOfExpandoObject_items[] | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The page property
     */
    page?: number | null;
    /**
     * The pageSize property
     */
    pageSize?: number | null;
    /**
     * The totalCount property
     */
    totalCount?: number | null;
    /**
     * The totalPages property
     */
    totalPages?: number | null;
}
export interface PaginationResultOfExpandoObject_items extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface RefreshTokenDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The refreshToken property
     */
    refreshToken?: string | null;
}
export interface RegisterUserDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The confirmPassword property
     */
    confirmPassword?: string | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAccessTokenDto(writer: SerializationWriter, accessTokenDto: Partial<AccessTokenDto> | undefined | null = {}) : void {
    if (accessTokenDto) {
        writer.writeStringValue("accessToken", accessTokenDto.accessToken);
        writer.writeStringValue("refreshToken", accessTokenDto.refreshToken);
        writer.writeAdditionalData(accessTokenDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateEntryBatchDto(writer: SerializationWriter, createEntryBatchDto: Partial<CreateEntryBatchDto> | undefined | null = {}) : void {
    if (createEntryBatchDto) {
        writer.writeCollectionOfObjectValues<CreateEntryDto>("entries", createEntryBatchDto.entries, serializeCreateEntryDto);
        writer.writeAdditionalData(createEntryBatchDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateEntryDto(writer: SerializationWriter, createEntryDto: Partial<CreateEntryDto> | undefined | null = {}) : void {
    if (createEntryDto) {
        writer.writeDateOnlyValue("date", createEntryDto.date);
        writer.writeStringValue("habitId", createEntryDto.habitId);
        writer.writeStringValue("note", createEntryDto.note);
        writer.writeNumberValue("value", createEntryDto.value);
        writer.writeAdditionalData(createEntryDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateHabitDto(writer: SerializationWriter, createHabitDto: Partial<CreateHabitDto> | undefined | null = {}) : void {
    if (createHabitDto) {
        writer.writeStringValue("description", createHabitDto.description);
        writer.writeDateOnlyValue("endDate", createHabitDto.endDate);
        writer.writeObjectValue<FrequencyDto>("frequency", createHabitDto.frequency, serializeFrequencyDto);
        writer.writeObjectValue<MilestoneDto>("milestone", createHabitDto.milestone, serializeMilestoneDto);
        writer.writeStringValue("name", createHabitDto.name);
        writer.writeObjectValue<TargetDto>("target", createHabitDto.target, serializeTargetDto);
        writer.writeNumberValue("type", createHabitDto.type);
        writer.writeAdditionalData(createHabitDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateTagDto(writer: SerializationWriter, createTagDto: Partial<CreateTagDto> | undefined | null = {}) : void {
    if (createTagDto) {
        writer.writeStringValue("description", createTagDto.description);
        writer.writeStringValue("name", createTagDto.name);
        writer.writeAdditionalData(createTagDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEntryDto(writer: SerializationWriter, entryDto: Partial<EntryDto> | undefined | null = {}) : void {
    if (entryDto) {
        writer.writeDateValue("createdAtUtc", entryDto.createdAtUtc);
        writer.writeDateOnlyValue("date", entryDto.date);
        writer.writeStringValue("externalId", entryDto.externalId);
        writer.writeObjectValue<EntryHabitDto>("habit", entryDto.habit, serializeEntryHabitDto);
        writer.writeStringValue("id", entryDto.id);
        writer.writeBooleanValue("isArchived", entryDto.isArchived);
        writer.writeCollectionOfObjectValues<LinkDto>("links", entryDto.links, serializeLinkDto);
        writer.writeStringValue("notes", entryDto.notes);
        writer.writeNumberValue("source", entryDto.source);
        writer.writeDateValue("updatedAtUtc", entryDto.updatedAtUtc);
        writer.writeNumberValue("value", entryDto.value);
        writer.writeAdditionalData(entryDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEntryHabitDto(writer: SerializationWriter, entryHabitDto: Partial<EntryHabitDto> | undefined | null = {}) : void {
    if (entryHabitDto) {
        writer.writeStringValue("id", entryHabitDto.id);
        writer.writeStringValue("name", entryHabitDto.name);
        writer.writeAdditionalData(entryHabitDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFrequencyDto(writer: SerializationWriter, frequencyDto: Partial<FrequencyDto> | undefined | null = {}) : void {
    if (frequencyDto) {
        writer.writeNumberValue("timesPerPeriod", frequencyDto.timesPerPeriod);
        writer.writeNumberValue("type", frequencyDto.type);
        writer.writeAdditionalData(frequencyDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGitHubUserProfileDto(writer: SerializationWriter, gitHubUserProfileDto: Partial<GitHubUserProfileDto> | undefined | null = {}) : void {
    if (gitHubUserProfileDto) {
        writer.writeStringValue("avatarUrl", gitHubUserProfileDto.avatarUrl);
        writer.writeStringValue("bio", gitHubUserProfileDto.bio);
        writer.writeStringValue("email", gitHubUserProfileDto.email);
        writer.writeNumberValue("followers", gitHubUserProfileDto.followers);
        writer.writeNumberValue("following", gitHubUserProfileDto.following);
        writer.writeCollectionOfObjectValues<LinkDto>("links", gitHubUserProfileDto.links, serializeLinkDto);
        writer.writeStringValue("login", gitHubUserProfileDto.login);
        writer.writeStringValue("name", gitHubUserProfileDto.name);
        writer.writeNumberValue("publicRepos", gitHubUserProfileDto.publicRepos);
        writer.writeAdditionalData(gitHubUserProfileDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHabitDto(writer: SerializationWriter, habitDto: Partial<HabitDto> | undefined | null = {}) : void {
    if (habitDto) {
        writer.writeDateValue("createdAtUtc", habitDto.createdAtUtc);
        writer.writeStringValue("description", habitDto.description);
        writer.writeDateOnlyValue("endDate", habitDto.endDate);
        writer.writeObjectValue<FrequencyDto>("frequency", habitDto.frequency, serializeFrequencyDto);
        writer.writeStringValue("id", habitDto.id);
        writer.writeBooleanValue("isArchived", habitDto.isArchived);
        writer.writeDateValue("lastCompletedAtUtc", habitDto.lastCompletedAtUtc);
        writer.writeCollectionOfObjectValues<LinkDto>("links", habitDto.links, serializeLinkDto);
        writer.writeObjectValue<MilestoneDto>("milestone", habitDto.milestone, serializeMilestoneDto);
        writer.writeStringValue("name", habitDto.name);
        writer.writeNumberValue("status", habitDto.status);
        writer.writeObjectValue<TargetDto>("target", habitDto.target, serializeTargetDto);
        writer.writeNumberValue("type", habitDto.type);
        writer.writeDateValue("updatedAtUtc", habitDto.updatedAtUtc);
        writer.writeAdditionalData(habitDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLinkDto(writer: SerializationWriter, linkDto: Partial<LinkDto> | undefined | null = {}) : void {
    if (linkDto) {
        writer.writeStringValue("href", linkDto.href);
        writer.writeStringValue("method", linkDto.method);
        writer.writeStringValue("rel", linkDto.rel);
        writer.writeAdditionalData(linkDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginUserDto(writer: SerializationWriter, loginUserDto: Partial<LoginUserDto> | undefined | null = {}) : void {
    if (loginUserDto) {
        writer.writeStringValue("email", loginUserDto.email);
        writer.writeStringValue("password", loginUserDto.password);
        writer.writeAdditionalData(loginUserDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMilestoneDto(writer: SerializationWriter, milestoneDto: Partial<MilestoneDto> | undefined | null = {}) : void {
    if (milestoneDto) {
        writer.writeNumberValue("current", milestoneDto.current);
        writer.writeNumberValue("target", milestoneDto.target);
        writer.writeAdditionalData(milestoneDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOperation(writer: SerializationWriter, operation: Partial<Operation> | undefined | null = {}) : void {
    if (operation) {
        writer.writeStringValue("from", operation.from);
        writer.writeStringValue("op", operation.op);
        writer.writeNumberValue("operationType", operation.operationType);
        writer.writeStringValue("path", operation.path);
        writer.writeObjectValue("value", operation.value);
        writer.writeAdditionalData(operation.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaginationResultOfExpandoObject(writer: SerializationWriter, paginationResultOfExpandoObject: Partial<PaginationResultOfExpandoObject> | undefined | null = {}) : void {
    if (paginationResultOfExpandoObject) {
        writer.writeBooleanValue("hasNextPage", paginationResultOfExpandoObject.hasNextPage);
        writer.writeBooleanValue("hasPreviousPage", paginationResultOfExpandoObject.hasPreviousPage);
        writer.writeCollectionOfObjectValues<PaginationResultOfExpandoObject_items>("items", paginationResultOfExpandoObject.items, serializePaginationResultOfExpandoObject_items);
        writer.writeCollectionOfObjectValues<LinkDto>("links", paginationResultOfExpandoObject.links, serializeLinkDto);
        writer.writeNumberValue("page", paginationResultOfExpandoObject.page);
        writer.writeNumberValue("pageSize", paginationResultOfExpandoObject.pageSize);
        writer.writeNumberValue("totalCount", paginationResultOfExpandoObject.totalCount);
        writer.writeNumberValue("totalPages", paginationResultOfExpandoObject.totalPages);
        writer.writeAdditionalData(paginationResultOfExpandoObject.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePaginationResultOfExpandoObject_items(writer: SerializationWriter, paginationResultOfExpandoObject_items: Partial<PaginationResultOfExpandoObject_items> | undefined | null = {}) : void {
    if (paginationResultOfExpandoObject_items) {
        writer.writeAdditionalData(paginationResultOfExpandoObject_items.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRefreshTokenDto(writer: SerializationWriter, refreshTokenDto: Partial<RefreshTokenDto> | undefined | null = {}) : void {
    if (refreshTokenDto) {
        writer.writeStringValue("refreshToken", refreshTokenDto.refreshToken);
        writer.writeAdditionalData(refreshTokenDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRegisterUserDto(writer: SerializationWriter, registerUserDto: Partial<RegisterUserDto> | undefined | null = {}) : void {
    if (registerUserDto) {
        writer.writeStringValue("confirmPassword", registerUserDto.confirmPassword);
        writer.writeStringValue("email", registerUserDto.email);
        writer.writeStringValue("name", registerUserDto.name);
        writer.writeStringValue("password", registerUserDto.password);
        writer.writeAdditionalData(registerUserDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStoreGithubAccessTokenDto(writer: SerializationWriter, storeGithubAccessTokenDto: Partial<StoreGithubAccessTokenDto> | undefined | null = {}) : void {
    if (storeGithubAccessTokenDto) {
        writer.writeStringValue("accessToken", storeGithubAccessTokenDto.accessToken);
        writer.writeNumberValue("expiresInDays", storeGithubAccessTokenDto.expiresInDays);
        writer.writeAdditionalData(storeGithubAccessTokenDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagDto(writer: SerializationWriter, tagDto: Partial<TagDto> | undefined | null = {}) : void {
    if (tagDto) {
        writer.writeDateValue("createdAtUtc", tagDto.createdAtUtc);
        writer.writeStringValue("description", tagDto.description);
        writer.writeStringValue("id", tagDto.id);
        writer.writeCollectionOfObjectValues<LinkDto>("links", tagDto.links, serializeLinkDto);
        writer.writeStringValue("name", tagDto.name);
        writer.writeDateValue("updatedAtUtc", tagDto.updatedAtUtc);
        writer.writeAdditionalData(tagDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTagsCollectionDto(writer: SerializationWriter, tagsCollectionDto: Partial<TagsCollectionDto> | undefined | null = {}) : void {
    if (tagsCollectionDto) {
        writer.writeCollectionOfObjectValues<TagDto>("items", tagsCollectionDto.items, serializeTagDto);
        writer.writeCollectionOfPrimitiveValues<UntypedNode>("links", tagsCollectionDto.links);
        writer.writeAdditionalData(tagsCollectionDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTargetDto(writer: SerializationWriter, targetDto: Partial<TargetDto> | undefined | null = {}) : void {
    if (targetDto) {
        writer.writeStringValue("unit", targetDto.unit);
        writer.writeNumberValue("value", targetDto.value);
        writer.writeAdditionalData(targetDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateEntryDto(writer: SerializationWriter, updateEntryDto: Partial<UpdateEntryDto> | undefined | null = {}) : void {
    if (updateEntryDto) {
        writer.writeDateOnlyValue("date", updateEntryDto.date);
        writer.writeStringValue("notes", updateEntryDto.notes);
        writer.writeNumberValue("value", updateEntryDto.value);
        writer.writeAdditionalData(updateEntryDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateHabitDto(writer: SerializationWriter, updateHabitDto: Partial<UpdateHabitDto> | undefined | null = {}) : void {
    if (updateHabitDto) {
        writer.writeStringValue("description", updateHabitDto.description);
        writer.writeDateOnlyValue("endDate", updateHabitDto.endDate);
        writer.writeObjectValue<FrequencyDto>("frequency", updateHabitDto.frequency, serializeFrequencyDto);
        writer.writeObjectValue<UpdateMilestoneDto>("milestone", updateHabitDto.milestone, serializeUpdateMilestoneDto);
        writer.writeStringValue("name", updateHabitDto.name);
        writer.writeObjectValue<TargetDto>("target", updateHabitDto.target, serializeTargetDto);
        writer.writeNumberValue("type", updateHabitDto.type);
        writer.writeAdditionalData(updateHabitDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateMilestoneDto(writer: SerializationWriter, updateMilestoneDto: Partial<UpdateMilestoneDto> | undefined | null = {}) : void {
    if (updateMilestoneDto) {
        writer.writeNumberValue("target", updateMilestoneDto.target);
        writer.writeAdditionalData(updateMilestoneDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateTagDto(writer: SerializationWriter, updateTagDto: Partial<UpdateTagDto> | undefined | null = {}) : void {
    if (updateTagDto) {
        writer.writeStringValue("description", updateTagDto.description);
        writer.writeStringValue("name", updateTagDto.name);
        writer.writeAdditionalData(updateTagDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateUserProfileDto(writer: SerializationWriter, updateUserProfileDto: Partial<UpdateUserProfileDto> | undefined | null = {}) : void {
    if (updateUserProfileDto) {
        writer.writeStringValue("name", updateUserProfileDto.name);
        writer.writeAdditionalData(updateUserProfileDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpsertHabitTagsDto(writer: SerializationWriter, upsertHabitTagsDto: Partial<UpsertHabitTagsDto> | undefined | null = {}) : void {
    if (upsertHabitTagsDto) {
        writer.writeCollectionOfPrimitiveValues<string>("tagIds", upsertHabitTagsDto.tagIds);
        writer.writeAdditionalData(upsertHabitTagsDto.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUserDto(writer: SerializationWriter, userDto: Partial<UserDto> | undefined | null = {}) : void {
    if (userDto) {
        writer.writeDateValue("createdAtUtc", userDto.createdAtUtc);
        writer.writeStringValue("email", userDto.email);
        writer.writeStringValue("id", userDto.id);
        writer.writeCollectionOfObjectValues<LinkDto>("links", userDto.links, serializeLinkDto);
        writer.writeStringValue("name", userDto.name);
        writer.writeDateValue("updatedAtUtc", userDto.updatedAtUtc);
        writer.writeAdditionalData(userDto.additionalData);
    }
}
export interface StoreGithubAccessTokenDto extends AdditionalDataHolder, Parsable {
    /**
     * The accessToken property
     */
    accessToken?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expiresInDays property
     */
    expiresInDays?: number | null;
}
export interface TagDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAtUtc property
     */
    createdAtUtc?: Date | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updatedAtUtc property
     */
    updatedAtUtc?: Date | null;
}
export interface TagsCollectionDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The items property
     */
    items?: TagDto[] | null;
    /**
     * The links property
     */
    links?: UntypedNode[] | null;
}
export interface TargetDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unit property
     */
    unit?: string | null;
    /**
     * The value property
     */
    value?: number | null;
}
export interface UpdateEntryDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date property
     */
    date?: DateOnly | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The value property
     */
    value?: number | null;
}
export interface UpdateHabitDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The endDate property
     */
    endDate?: DateOnly | null;
    /**
     * The frequency property
     */
    frequency?: FrequencyDto | null;
    /**
     * The milestone property
     */
    milestone?: UpdateMilestoneDto | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The target property
     */
    target?: TargetDto | null;
    /**
     * The type property
     */
    type?: number | null;
}
export interface UpdateMilestoneDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The target property
     */
    target?: number | null;
}
export interface UpdateTagDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface UpdateUserProfileDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
}
export interface UpsertHabitTagsDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The tagIds property
     */
    tagIds?: string[] | null;
}
export interface UserDto extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdAtUtc property
     */
    createdAtUtc?: Date | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The links property
     */
    links?: LinkDto[] | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The updatedAtUtc property
     */
    updatedAtUtc?: Date | null;
}
/* tslint:enable */
/* eslint-enable */
