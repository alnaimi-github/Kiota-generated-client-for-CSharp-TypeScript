/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTagDtoFromDiscriminatorValue, serializeUpdateTagDto, type TagDto, type UpdateTagDto } from '../../models/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /tags/{id}
 */
export interface TagsItemRequestBuilder extends BaseRequestBuilder<TagsItemRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TagDto>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TagDto | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: UpdateTagDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateTagDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TagsItemRequestBuilderUriTemplate = "{+baseurl}/tags/{id}";
/**
 * Metadata for all the requests in the request builder.
 */
export const TagsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TagsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: TagsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "send",
        responseBodyFactory:  createTagDtoFromDiscriminatorValue,
    },
    put: {
        uriTemplate: TagsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeUpdateTagDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
