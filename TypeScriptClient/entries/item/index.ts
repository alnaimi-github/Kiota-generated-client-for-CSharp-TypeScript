/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { serializeUpdateEntryDto, type UpdateEntryDto } from '../../models/index.js';
// @ts-ignore
import { ArchiveRequestBuilderRequestsMetadata, type ArchiveRequestBuilder } from './archive/index.js';
// @ts-ignore
import { type UnarchiveRequestBuilder, UnarchiveRequestBuilderRequestsMetadata } from './unarchive/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /entries/{id}
 */
export interface EntriesItemRequestBuilder extends BaseRequestBuilder<EntriesItemRequestBuilder> {
    /**
     * The archive property
     */
    get archive(): ArchiveRequestBuilder;
    /**
     * The unarchive property
     */
    get unarchive(): UnarchiveRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     get(requestConfiguration?: RequestConfiguration<EntriesItemRequestBuilderGetQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: UpdateEntryDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EntriesItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateEntryDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface EntriesItemRequestBuilderGetQueryParameters {
    fields?: string;
    includeLinks?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const EntriesItemRequestBuilderUriTemplate = "{+baseurl}/entries/{id}{?Fields*,IncludeLinks*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EntriesItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "fields": "Fields",
    "includeLinks": "IncludeLinks",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EntriesItemRequestBuilderNavigationMetadata: Record<Exclude<keyof EntriesItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    archive: {
        requestsMetadata: ArchiveRequestBuilderRequestsMetadata,
    },
    unarchive: {
        requestsMetadata: UnarchiveRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EntriesItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: EntriesItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: EntriesItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        queryParametersMapper: EntriesItemRequestBuilderGetQueryParametersMapper,
    },
    put: {
        uriTemplate: EntriesItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeUpdateEntryDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
