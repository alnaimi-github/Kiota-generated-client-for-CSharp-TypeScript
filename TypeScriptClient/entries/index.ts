/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEntryDtoFromDiscriminatorValue, createPaginationResultOfExpandoObjectFromDiscriminatorValue, serializeCreateEntryDto, serializeEntryDto, type CreateEntryDto, type EntryDto, type PaginationResultOfExpandoObject } from '../models/index.js';
// @ts-ignore
import { BatchRequestBuilderRequestsMetadata, type BatchRequestBuilder } from './batch/index.js';
// @ts-ignore
import { EntriesItemRequestBuilderNavigationMetadata, EntriesItemRequestBuilderRequestsMetadata, type EntriesItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type DateOnly, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /entries
 */
export interface EntriesRequestBuilder extends BaseRequestBuilder<EntriesRequestBuilder> {
    /**
     * The batch property
     */
    get batch(): BatchRequestBuilder;
    /**
     * Gets an item from the ApiSdk.entries.item collection
     * @param id Unique identifier of the item
     * @returns {EntriesItemRequestBuilder}
     */
     byId(id: string) : EntriesItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PaginationResultOfExpandoObject>}
     */
     get(requestConfiguration?: RequestConfiguration<EntriesRequestBuilderGetQueryParameters> | undefined) : Promise<PaginationResultOfExpandoObject | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EntryDto>}
     */
     post(body: CreateEntryDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EntryDto | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EntriesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateEntryDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface EntriesRequestBuilderGetQueryParameters {
    fields?: string;
    fromDate?: DateOnly;
    habitId?: string;
    includeLinks?: boolean;
    isArchived?: boolean;
    page?: number;
    pageSize?: number;
    sort?: string;
    source?: string;
    toDate?: DateOnly;
}
/**
 * Uri template for the request builder.
 */
export const EntriesRequestBuilderUriTemplate = "{+baseurl}/entries{?Fields*,FromDate*,HabitId*,IncludeLinks*,IsArchived*,Page*,PageSize*,Sort*,Source*,ToDate*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EntriesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "fields": "Fields",
    "fromDate": "FromDate",
    "habitId": "HabitId",
    "includeLinks": "IncludeLinks",
    "isArchived": "IsArchived",
    "page": "Page",
    "pageSize": "PageSize",
    "sort": "Sort",
    "source": "Source",
    "toDate": "ToDate",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EntriesRequestBuilderNavigationMetadata: Record<Exclude<keyof EntriesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: EntriesItemRequestBuilderRequestsMetadata,
        navigationMetadata: EntriesItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
    batch: {
        requestsMetadata: BatchRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EntriesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EntriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "send",
        responseBodyFactory:  createPaginationResultOfExpandoObjectFromDiscriminatorValue,
        queryParametersMapper: EntriesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: EntriesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "send",
        responseBodyFactory:  createEntryDtoFromDiscriminatorValue,
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeCreateEntryDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
