/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHabitDtoFromDiscriminatorValue, serializeCreateHabitDto, serializeHabitDto, type CreateHabitDto, type HabitDto } from '../models/index.js';
// @ts-ignore
import { HabitItemRequestBuilderNavigationMetadata, HabitItemRequestBuilderRequestsMetadata, type HabitItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /habits
 */
export interface HabitsRequestBuilder extends BaseRequestBuilder<HabitsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.habits.item collection
     * @param habitId Unique identifier of the item
     * @returns {HabitItemRequestBuilder}
     */
     byHabitId(habitId: string) : HabitItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     get(requestConfiguration?: RequestConfiguration<HabitsRequestBuilderGetQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<HabitDto>}
     */
     post(body: CreateHabitDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<HabitDto | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<HabitsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateHabitDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface HabitsRequestBuilderGetQueryParameters {
    fields?: string;
    includeLinks?: boolean;
    page?: number;
    pageSize?: number;
    q?: string;
    sort?: string;
    status?: string;
    type?: string;
}
/**
 * Uri template for the request builder.
 */
export const HabitsRequestBuilderUriTemplate = "{+baseurl}/habits{?Fields*,IncludeLinks*,Page*,PageSize*,Sort*,Status*,Type*,q*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const HabitsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "fields": "Fields",
    "includeLinks": "IncludeLinks",
    "page": "Page",
    "pageSize": "PageSize",
    "sort": "Sort",
    "status": "Status",
    "type": "Type",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const HabitsRequestBuilderNavigationMetadata: Record<Exclude<keyof HabitsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byHabitId: {
        requestsMetadata: HabitItemRequestBuilderRequestsMetadata,
        navigationMetadata: HabitItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["habit%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const HabitsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: HabitsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        queryParametersMapper: HabitsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: HabitsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "send",
        responseBodyFactory:  createHabitDtoFromDiscriminatorValue,
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeCreateHabitDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
