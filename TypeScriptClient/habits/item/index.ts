/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { serializeOperation, serializeUpdateHabitDto, type Operation, type UpdateHabitDto } from '../../models/index.js';
// @ts-ignore
import { TagsRequestBuilderNavigationMetadata, TagsRequestBuilderRequestsMetadata, type TagsRequestBuilder } from './tags/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /habits/{habit-id}
 */
export interface HabitItemRequestBuilder extends BaseRequestBuilder<HabitItemRequestBuilder> {
    /**
     * The tags property
     */
    get tags(): TagsRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     get(requestConfiguration?: RequestConfiguration<HabitItemRequestBuilderGetQueryParameters> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     patch(body: Operation[], requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ArrayBuffer>}
     */
     put(body: UpdateHabitDto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<HabitItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Operation[], requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateHabitDto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface HabitItemRequestBuilderGetQueryParameters {
    fields?: string;
    includeLinks?: boolean;
}
/**
 * Uri template for the request builder.
 */
export const HabitItemRequestBuilderUriTemplate = "{+baseurl}/habits/{habit%2Did}{?Fields*,IncludeLinks*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const HabitItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "fields": "Fields",
    "includeLinks": "IncludeLinks",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const HabitItemRequestBuilderNavigationMetadata: Record<Exclude<keyof HabitItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    tags: {
        requestsMetadata: TagsRequestBuilderRequestsMetadata,
        navigationMetadata: TagsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const HabitItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: HabitItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
    },
    get: {
        uriTemplate: HabitItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        queryParametersMapper: HabitItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: HabitItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeOperation,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        uriTemplate: HabitItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, application/json;v=1, application/json;v=2, application/vnd.dev-habit.hateoas+json, application/vnd.dev-habit.hateoas.1+json, application/vnd.dev-habit.hateoas.2+json",
        adapterMethodName: "sendPrimitive",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json-patch+json",
        requestBodySerializer: serializeUpdateHabitDto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
